1. Using Brace-Expansion, create the following directories within the $HOME directory:
   1123, 1134, 1145, 1156

mkdir $HOME/{1123,1134,1145,1156}

2. create files in the $HOME/1123
   Files to create: 1.txt, 2.txt, 3.txt, 4.txt, 5.txt, 6~.txt, 7~.txt, 8~.txt, 9~.txt
touch $HOME/1123/{1,2,3,4,5,6~,7~,8~,9~}.txt

3. Using the find command, list all files in $HOME/1123 that end in .txt.
find $HOME/1123 | egrep *.txt

4. Copy all files in the $HOME/1123 directory, that end in ".txt", and omit files containing a tilde "~" character, to directory $HOME/CUT.
cp $(find $HOME/1123/ -name *.txt ! -name *~*) $HOME/CUT/

or 

find $HOME/1123/ -name *.txt ! -name *~* $HOME/CUT/ -exec cp {} $HOME/CUT/. \;

5. Using ONLY the find command, find all empty files/directories in directory /var and print out ONLY the filename (not absolute path), and 
   the inode number, separated by newlines.
find /var/ -empty -printf "%i %f\n"

6. Using ONLY the find command, find all files on the system with inode 4026532575 and print only the filename to the screen, not the 
   absolute path to the file, separating each filename with a newline. 
find -inum 4026532575 -printf "%f\n"

7. Using only the ls -l and cut Commands, write a BASH script that shows all filenames with extensions ie: 1.txt, etc., but no directories, in $HOME/CUT.
   Write those to a text file called names in $HOME/CUT directory.
   Omit the names filename from your output.
ls -l ~/CUT | cut -d'.' -s -f1- | cut -d: -f2 | cut -d' ' -f2 > ~/CUT/names





8.Write a basic bash script that greps ONLY the IP addresses in the text file provided (named StoryHiddenIPs in the current directory); sort them 
  uniquely by number of times they appear.

egrep -o '([0-9]{1,3}\.){3}[0-9]{1,3}' StoryHiddenIPs | sort | uniq -c | sort -nr



9. Using ONLY the awk command, write a BASH one-liner script that extracts ONLY the names of all the system and user accounts that are not UIDs 0-3.
   Only display those that use /bin/bash as their default shell.
   The input file is named $HOME/passwd and is located in the current directory.
   Output the results to a file called $HOME/SED/names.txt

awk 'NR==5, NR==44 {print NR,$0}' $HOME/passwd | awk  -F: '($7 == "/bin/bash") {print $1,$7}' | awk 'BEGIN {FS=" "} {print $2}' > $HOME/SED/names.txt
 
 OR
 
awk -F: '$3 >= 3 && $NF == "/bin/bash" {print $1}' $HOME/passwd > $HOME/SED/names.txt


10. Find all dmesg kernel messages that contain CPU or BIOS (uppercase) in the string, but not usable or reserved (case-insensitive)
   Print only the msg itself, omitting the bracketed numerical expressions ie: [1.132775]

dmesg | egrep  'BIOS|CPU' | egrep -vi 'reserved|usable' | cut -d"]" -f2-



11.Write a Bash script using "Command Substitution" to replace all passwords, using openssl, from the file $HOME/PASS/shadow.txt with the MD5 encrypted 
  password: Password1234, with salt: bad4u
  Output of this command should go to the screen/standard output.
  You are not limited to a particular command, however you must use openssl. Type man openssl passwd for more information.
A=$(openssl passwd -1 -salt bad4u Password1234)

awk -F: -v "awk_var=$A" 'BEGIN {OFS=":"} {$2=awk_var} {print}' $HOME/PASS/shadow.txt  <------ awk -F: -v "awk_var=$A" makes A from outside of the 
                                                                                              awk command a local awk variable to use in the command.
                                                                                              It does this because awk can only use variables established
                                                                                              within itself.


12. Using ONLY sed, write all lines from $HOME/passwd into $HOME/PASS/passwd.txt that do not end with either /bin/sh or /bin/false.

sed '/\/bin\/false/d;/\/bin\/sh/d' $HOME/passwd > $HOME/PASS/passwd.txt



13. Using find, find all files under the $HOME directory with a .bin extension ONLY.
   Once the file(s) and their path(s) have been found, remove the file name from the absolute path output.
   Ensure there is no trailing / at the end of the directory path when outputting to standard output.
   You may need to sort the output depending on the command(s) you use.

find $HOME/ -type f -name "*.bin" | rev | cut -d/ -f2- | rev | sort -u

OR

find $HOME -type f -iname "*.bin" -printf "%h\n" |sort -u

OR

find $HOME -type f -iname "*.bin" | awk 'BEGIN{FS="/";OFS="/'"}{NF=NF-1; print $0}


14.Find all executable files under the following four directories:
  /bin, /sbin, /usr/bin, /usr/sbin
  Sort the filenames with absolute path, and get the md5sum of the 10th file from the top of the list.

md5sum $(find /sbin /bin /usr/bin /usr/sbin -executable -type f | sort | head | tail -1) | cut -d" " -f1
      Indicator of 
      command substitution



15. Write a script which will copy the last entry/line in the passwd-like file specified by the $1 positional parameter
   Modify the copied line to change:
   User name to the value specified by $2 positional parameter
   Used id and group id to the value specified by $3 positional parameter
   Home directory to a directory matching the user name specified by $2 positional parameter under the /home directory
   The default shell to `/bin/bash'
   Append the modified line to the end of the file

tail -1 $1 | awk -F: -v "name=$2" -v "id=$3" 'BEGIN {OFS=":"} {$1=name} {$3=id} {$4=id} {$6="/home/"name} {$7="/bin/bash"} {print}' >> $1
                                                                                                         or $NF (last field)


16. Using any BASH command complete the following:
   Sort the /etc/passwd file numerically by the GID field.
   For the 10th entry in the sorted passwd file, get an md5 hash of that entryâ€™s home directory.
   Output ONLY the MD5 hash of the directory's name to standard output.

cat /etc/passwd | cut -d: -f4- | sort -n | head | tail -1 | cut -d: -f3 | md5sum | cut -d" " -f1



17.Write a script which will find and hash the contents 3 levels deep from each of these directories: /bin /etc /var
  Your script should:
  Exclude named pipes. These can break your script.
  Redirect STDOUT and STDERR to separate files.
  Determine the count of files hashed in the file with hashes.
  Determine the count of unsuccessfully hashed directories.
  Have both counts output to the screen with an appropriate title for each count.

md5sum $(find /bin /etc /var -maxdepth 3 ! -type p) 2>stderr.txt 1>MD.txt
a=$(wc -l MD.txt | cut -d" " -f1)
b=$(grep "directory" stderr.txt | wc -l)
echo "Successfully Hashed Files: $a"
echo "Unsuccessfully Hashed Directories: $b"





Design a script that detects the existence of directory: $HOME/.ssh
Upon successful detection, copies any and all files from within the directory $HOME/.ssh to directory $HOME/SSH and produce no output. You will need to create $HOME/SSH.
Upon un-successful detection, displays the error message "Run ssh-keygen" to the user.
#!/bin/bash
    if [[ -d /$HOME/.ssh ]]
        then
            mkdir /$HOME/SSH/
            cp  /$HOME/.ssh/* $HOME/SSH/
    else
        echo 'Run ssh-keygen'
    fi  
    
    
    
    Write a script that determines your default gateway ip address. Assign that address to a variable using command substitution.
NOTE: Networking on the CTFd is limited for security reasons. ip route and route are emulated. Use either of those with no switches.
Have your script determine the absolute path of the ping application. Assign the absolute path to a variable using command substitution.
Have your script send six ping packets to your default gateway, utilizing the path discovered in the previous step, and assign the response to a variable using command substitution.
Evaluate the response as being either successful or failure, and print an appropriate message to the screen.
    
    A=$(ip route | head -1 | cut -d" " -f3)
B=$(which ping)
C=$($B -c 6 $A)
D=$(echo $C | tail -2 | head -1 | awk -F"packets transmitted" '{print $1}' | awk -F" " '{print $NF}')
E=$(echo $C | tail -2 | head -1 | awk -F"received" '{print $1}' | awk -F" " '{print $NF}')
if [[ $D == $E ]]; then
   echo "successful"
else
   echo "failure"
fi
Create the following files in a new directory you create $HOME/ZIP:
file1 will contain the md5sum of the text 12345
file2 will contain the md5sum of the text 6789
file3 will contain the md5sum of the text abcdef
Create a zip file containing the three files above, without being stored inside a directory in the zip file. Name the zip file $HOME/ZIP/file.zip
mkdir $HOME/ZIP
cd $HOME/ZIP
touch $HOME/ZIP/file{1,2,3}
echo 12345 | md5sum | cut -d" " -f1 > file1
echo 6789 | md5sum | cut -d" " -f1 > file2
echo abcdef | md5sum | cut -d" " -f1 > file3
zip file.zip file1 file2 file3
tar -cvzf file.tar.gz file.zip

