VARIABLE MAKING
var_a="Hello World"  <----- No spaces after or before the =
echo $var_a  <----- Call the variable made with a $
CONSTANT VARIABLES
$#  <----- Number of arguments
$0  <----- The name of the script
$2  <----- The nth argument passed
$*  <----- All of the arguments passed
$?  <----- Exit status, should be sero
$_  <----- Last argument povided, should be zero
$$  <----- PID
#-  <------ flags set in shell

#!/bin/bash
# This is a comment

ESTABLISHING FUNCTIONS
function print_somefun {
echo $2
}

print_somefun $1

OR

somefun() {
echo $1
}

somefun $1      <------- call the function once its been made (within the script)


EXAMPLE of Function
#!/bin/bash
# This is a basic function

lines_in_file() {
      cat $1 | wc -l
}

function num_lines=$( lines_in_file $1 )

echo The file $1 has $num_lines in it.
echo Good day sir


ANOTHER EXAMPLE
function f1 {
        echo Hello I\'m function
        echo Bye!
}

function f2 { Hello I\'m function 2; echo Bye! Bye!; }
f3() {
        echo Hello I\'m function 3
        echo Bye!!!
}
f4 () { echo Hello I\'m function 4; echo Bye!! Bye!!; }

#lets look at our functions
f4
f3
f2
f1


FUNCTIONS IN YOUR SHELL
my_function () {echo "This is my function"; }

OR

function redirection_out {
> declared -a output=("baeldung" "lorem" "ipsum")


WHEN SCRIPTING:
"" = interprets variables
'' = interprets literal
\ = escape individual characters




VARIABLE SUBSTITUTION
https://www.gnu.org/software/libc/manual/html_node/Variable-Substitution.html 

{variable:-default}
Substitute the value of variable, but if that is empty or undefined, use default instead.

${variable:=default}
Substitute the value of variable, but if that is empty or undefined, use default instead and set the variable to default.

${variable:?message}
If variable is defined and not empty, substitute its value.

Otherwise, print message as an error message on the standard error stream, and consider word expansion a failure.

${variable:+replacement}
Substitute replacement, but only if variable is defined and nonempty. Otherwise, substitute nothing for this construct.



PRACTICE QUESTIONS
1. Using find, find all files under the $HOME directory with a .bin extension ONLY.
   Once the file(s) and their path(s) have been found, remove the file name from the absolute path output.
   Ensure there is no trailing / at the end of the directory path when outputting to standard output.
   You may need to sort the output depending on the command(s) you use.
find $HOME/ -type f -name "*.bin" | rev | cut -d/ -f2- | rev | sort -u



2.Find all executable files under the following four directories:
  /bin, /sbin, /usr/bin, /usr/sbin
  Sort the filenames with absolute path, and get the md5sum of the 10th file from the top of the list.
md5sum $(find /sbin /bin /usr/bin /usr/sbin -executable -type f | sort | head | tail -1) | cut -d" " -f1
